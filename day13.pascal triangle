{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "995d9a11-94b4-4041-9238-9aa56a6a2580",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     1 \n",
      "    1 1 \n",
      "   1 * 1 \n",
      "  1 * * 1 \n",
      " 1 * * * 1 \n"
     ]
    }
   ],
   "source": [
    "num=6\n",
    "for i in range(1,num):\n",
    "    for j in range(i,num):\n",
    "        print(\" \",end=\"\")\n",
    "    for k in range(1,i+1):\n",
    "        if (i==k or k==1):\n",
    "            print(1,end=\" \")\n",
    "        else:\n",
    "            print(\"*\",end=\" \")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f63d3f6c-80bf-452b-a7dd-c2874e13f5d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     1 \n",
      "    1 1 \n",
      "   1 * 1 \n",
      "  1 * * 1 \n",
      " 1 * * * 1 \n"
     ]
    }
   ],
   "source": [
    "num=6\n",
    "ls=[]\n",
    "for i in range(1,num):\n",
    "    tem=[]\n",
    "    for j in range(i,num):\n",
    "        print(\" \",end=\"\")\n",
    "    for k in range(1,i+1):\n",
    "        if (i==k or k==1):\n",
    "            tem.append(1)\n",
    "            print(1,end=\" \")\n",
    "        else:\n",
    "            tem.append(\"*\")\n",
    "            print(\"*\",end=\" \")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6f286da2-b24d-487e-9aaa-50a42ff607a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     1 1 \n",
      "    1 "
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[9], line 12\u001b[0m\n\u001b[0;32m     10\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;241m1\u001b[39m,end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 12\u001b[0m     d\u001b[38;5;241m=\u001b[39mls[i\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m][k]\u001b[38;5;241m+\u001b[39mls[i\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m][k\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m]\n\u001b[0;32m     13\u001b[0m     tem\u001b[38;5;241m.\u001b[39mappend(d)\n\u001b[0;32m     14\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m*\u001b[39m\u001b[38;5;124m\"\u001b[39m,end\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "num=6\n",
    "ls=[]\n",
    "for i in range(1,num+1):\n",
    "    tem=[]\n",
    "    for j in range(i,num):\n",
    "        print(\" \",end=\"\")\n",
    "    for k in range(0,i+1):\n",
    "        if (k==0 or k==i):\n",
    "            tem.append(1)\n",
    "            print(1,end=\" \")\n",
    "        else:\n",
    "            d=ls[i-1][k]+ls[i-1][k-1]\n",
    "            tem.append(d)\n",
    "            print(\"*\",end=\" \")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3192d17f-287b-43f3-98fe-419327e6d6c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----1 \n",
      "---1 1 \n",
      "--1 2 1 \n",
      "-1 3 3 1 \n",
      "1 4 6 4 1 \n",
      "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n"
     ]
    }
   ],
   "source": [
    "mylist = []\n",
    "num = 4\n",
    "for i in range (0,num+1):\n",
    "    temp = []\n",
    "    for j in range (i,num):\n",
    "        print(\"-\",end  = \"\")\n",
    "\n",
    "    for k in range (0,i+1):\n",
    "        if(k==0 or k==i):\n",
    "            temp.append(1)\n",
    "            print(1,end = \" \")\n",
    "\n",
    "        else :\n",
    "            data = mylist [i-1][k] + mylist[i-1][k-1]\n",
    "            temp.append (data)\n",
    "            print(data,end =\" \")\n",
    "        #appending temporary list to mylist\n",
    "    mylist.append (temp)\n",
    "\n",
    "    print(\"\")\n",
    "print(mylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fce4901b-2eab-4b8d-908c-cb34c9af16da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------\n",
      "---------\n",
      "---------\n",
      "---------\n",
      "---------\n",
      "---------\n",
      "count=> 6\n"
     ]
    }
   ],
   "source": [
    "mylist = [10,20,10,30,10,10,40,40]\n",
    "count = 0\n",
    "target  = 9 \n",
    "for i in range (0,len(mylist)):\n",
    "    for j in range (i+1,len(mylist)-2):\n",
    "        if(mylist[i]==mylist[j]):\n",
    "            count+=1\n",
    "        \n",
    "            print(\"---------\")\n",
    "  \n",
    "print(\"count=>\",count) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74e572cd-f358-4134-95a6-d4aeda345f58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
